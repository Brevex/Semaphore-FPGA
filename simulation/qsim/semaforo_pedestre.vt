// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/09/2025 16:22:46"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    semaforo_pedestre
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module semaforo_pedestre_vlg_sample_tst(
	botao_pedestre,
	clk,
	desliga_semaforo,
	reset,
	sinal_emergencia,
	sampler_tx
);
input  botao_pedestre;
input  clk;
input  desliga_semaforo;
input  reset;
input  sinal_emergencia;
output sampler_tx;

reg sample;
time current_time;
always @(botao_pedestre or clk or desliga_semaforo or reset or sinal_emergencia)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module semaforo_pedestre_vlg_check_tst (
	display1,
	display2,
	led_atencao,
	led_perigo,
	led_pode_passar,
	led_sistema,
	sampler_rx
);
input [6:0] display1;
input [6:0] display2;
input  led_atencao;
input  led_perigo;
input  led_pode_passar;
input  led_sistema;
input sampler_rx;

reg [6:0] display1_expected;
reg [6:0] display2_expected;
reg  led_atencao_expected;
reg  led_perigo_expected;
reg  led_pode_passar_expected;
reg  led_sistema_expected;

reg [6:0] display1_prev;
reg [6:0] display2_prev;
reg  led_atencao_prev;
reg  led_perigo_prev;
reg  led_pode_passar_prev;
reg  led_sistema_prev;

reg [6:0] display1_expected_prev;
reg [6:0] display2_expected_prev;
reg  led_atencao_expected_prev;
reg  led_perigo_expected_prev;
reg  led_pode_passar_expected_prev;
reg  led_sistema_expected_prev;

reg [6:0] last_display1_exp;
reg [6:0] last_display2_exp;
reg  last_led_atencao_exp;
reg  last_led_perigo_exp;
reg  last_led_pode_passar_exp;
reg  last_led_sistema_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	display1_prev = display1;
	display2_prev = display2;
	led_atencao_prev = led_atencao;
	led_perigo_prev = led_perigo;
	led_pode_passar_prev = led_pode_passar;
	led_sistema_prev = led_sistema;
end

// update expected /o prevs

always @(trigger)
begin
	display1_expected_prev = display1_expected;
	display2_expected_prev = display2_expected;
	led_atencao_expected_prev = led_atencao_expected;
	led_perigo_expected_prev = led_perigo_expected;
	led_pode_passar_expected_prev = led_pode_passar_expected;
	led_sistema_expected_prev = led_sistema_expected;
end



// expected display1[6]
initial
begin
	display1_expected[6] = 1'bX;
end 

// expected display1[5]
initial
begin
	display1_expected[5] = 1'bX;
end 

// expected display1[4]
initial
begin
	display1_expected[4] = 1'bX;
end 

// expected display1[3]
initial
begin
	display1_expected[3] = 1'bX;
end 

// expected display1[2]
initial
begin
	display1_expected[2] = 1'bX;
end 

// expected display1[1]
initial
begin
	display1_expected[1] = 1'bX;
end 

// expected display1[0]
initial
begin
	display1_expected[0] = 1'bX;
end 

// expected display2[6]
initial
begin
	display2_expected[6] = 1'bX;
end 

// expected display2[5]
initial
begin
	display2_expected[5] = 1'bX;
end 

// expected display2[4]
initial
begin
	display2_expected[4] = 1'bX;
end 

// expected display2[3]
initial
begin
	display2_expected[3] = 1'bX;
end 

// expected display2[2]
initial
begin
	display2_expected[2] = 1'bX;
end 

// expected display2[1]
initial
begin
	display2_expected[1] = 1'bX;
end 

// expected display2[0]
initial
begin
	display2_expected[0] = 1'bX;
end 

// expected led_atencao
initial
begin
	led_atencao_expected = 1'bX;
end 

// expected led_perigo
initial
begin
	led_perigo_expected = 1'bX;
end 

// expected led_pode_passar
initial
begin
	led_pode_passar_expected = 1'bX;
end 

// expected led_sistema
initial
begin
	led_sistema_expected = 1'bX;
end 
// generate trigger
always @(display1_expected or display1 or display2_expected or display2 or led_atencao_expected or led_atencao or led_perigo_expected or led_perigo or led_pode_passar_expected or led_pode_passar or led_sistema_expected or led_sistema)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected display1 = %b | expected display2 = %b | expected led_atencao = %b | expected led_perigo = %b | expected led_pode_passar = %b | expected led_sistema = %b | ",display1_expected_prev,display2_expected_prev,led_atencao_expected_prev,led_perigo_expected_prev,led_pode_passar_expected_prev,led_sistema_expected_prev);
	$display("| real display1 = %b | real display2 = %b | real led_atencao = %b | real led_perigo = %b | real led_pode_passar = %b | real led_sistema = %b | ",display1_prev,display2_prev,led_atencao_prev,led_perigo_prev,led_pode_passar_prev,led_sistema_prev);
`endif
	if (
		( display1_expected_prev[0] !== 1'bx ) && ( display1_prev[0] !== display1_expected_prev[0] )
		&& ((display1_expected_prev[0] !== last_display1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display1_exp[0] = display1_expected_prev[0];
	end
	if (
		( display1_expected_prev[1] !== 1'bx ) && ( display1_prev[1] !== display1_expected_prev[1] )
		&& ((display1_expected_prev[1] !== last_display1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display1_exp[1] = display1_expected_prev[1];
	end
	if (
		( display1_expected_prev[2] !== 1'bx ) && ( display1_prev[2] !== display1_expected_prev[2] )
		&& ((display1_expected_prev[2] !== last_display1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display1_exp[2] = display1_expected_prev[2];
	end
	if (
		( display1_expected_prev[3] !== 1'bx ) && ( display1_prev[3] !== display1_expected_prev[3] )
		&& ((display1_expected_prev[3] !== last_display1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display1_exp[3] = display1_expected_prev[3];
	end
	if (
		( display1_expected_prev[4] !== 1'bx ) && ( display1_prev[4] !== display1_expected_prev[4] )
		&& ((display1_expected_prev[4] !== last_display1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display1_exp[4] = display1_expected_prev[4];
	end
	if (
		( display1_expected_prev[5] !== 1'bx ) && ( display1_prev[5] !== display1_expected_prev[5] )
		&& ((display1_expected_prev[5] !== last_display1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display1_exp[5] = display1_expected_prev[5];
	end
	if (
		( display1_expected_prev[6] !== 1'bx ) && ( display1_prev[6] !== display1_expected_prev[6] )
		&& ((display1_expected_prev[6] !== last_display1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display1_exp[6] = display1_expected_prev[6];
	end
	if (
		( display2_expected_prev[0] !== 1'bx ) && ( display2_prev[0] !== display2_expected_prev[0] )
		&& ((display2_expected_prev[0] !== last_display2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display2_exp[0] = display2_expected_prev[0];
	end
	if (
		( display2_expected_prev[1] !== 1'bx ) && ( display2_prev[1] !== display2_expected_prev[1] )
		&& ((display2_expected_prev[1] !== last_display2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display2_exp[1] = display2_expected_prev[1];
	end
	if (
		( display2_expected_prev[2] !== 1'bx ) && ( display2_prev[2] !== display2_expected_prev[2] )
		&& ((display2_expected_prev[2] !== last_display2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display2_exp[2] = display2_expected_prev[2];
	end
	if (
		( display2_expected_prev[3] !== 1'bx ) && ( display2_prev[3] !== display2_expected_prev[3] )
		&& ((display2_expected_prev[3] !== last_display2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display2_exp[3] = display2_expected_prev[3];
	end
	if (
		( display2_expected_prev[4] !== 1'bx ) && ( display2_prev[4] !== display2_expected_prev[4] )
		&& ((display2_expected_prev[4] !== last_display2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display2_exp[4] = display2_expected_prev[4];
	end
	if (
		( display2_expected_prev[5] !== 1'bx ) && ( display2_prev[5] !== display2_expected_prev[5] )
		&& ((display2_expected_prev[5] !== last_display2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display2_exp[5] = display2_expected_prev[5];
	end
	if (
		( display2_expected_prev[6] !== 1'bx ) && ( display2_prev[6] !== display2_expected_prev[6] )
		&& ((display2_expected_prev[6] !== last_display2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display2_exp[6] = display2_expected_prev[6];
	end
	if (
		( led_atencao_expected_prev !== 1'bx ) && ( led_atencao_prev !== led_atencao_expected_prev )
		&& ((led_atencao_expected_prev !== last_led_atencao_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_atencao :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_atencao_expected_prev);
		$display ("     Real value = %b", led_atencao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_led_atencao_exp = led_atencao_expected_prev;
	end
	if (
		( led_perigo_expected_prev !== 1'bx ) && ( led_perigo_prev !== led_perigo_expected_prev )
		&& ((led_perigo_expected_prev !== last_led_perigo_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_perigo :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_perigo_expected_prev);
		$display ("     Real value = %b", led_perigo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_led_perigo_exp = led_perigo_expected_prev;
	end
	if (
		( led_pode_passar_expected_prev !== 1'bx ) && ( led_pode_passar_prev !== led_pode_passar_expected_prev )
		&& ((led_pode_passar_expected_prev !== last_led_pode_passar_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_pode_passar :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_pode_passar_expected_prev);
		$display ("     Real value = %b", led_pode_passar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_led_pode_passar_exp = led_pode_passar_expected_prev;
	end
	if (
		( led_sistema_expected_prev !== 1'bx ) && ( led_sistema_prev !== led_sistema_expected_prev )
		&& ((led_sistema_expected_prev !== last_led_sistema_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_sistema :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_sistema_expected_prev);
		$display ("     Real value = %b", led_sistema_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_led_sistema_exp = led_sistema_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module semaforo_pedestre_vlg_vec_tst();
// constants                                           
// general purpose registers
reg botao_pedestre;
reg clk;
reg desliga_semaforo;
reg reset;
reg sinal_emergencia;
// wires                                               
wire [6:0] display1;
wire [6:0] display2;
wire led_atencao;
wire led_perigo;
wire led_pode_passar;
wire led_sistema;

wire sampler;                             

// assign statements (if any)                          
semaforo_pedestre i1 (
// port map - connection between master ports and signals/registers   
	.botao_pedestre(botao_pedestre),
	.clk(clk),
	.desliga_semaforo(desliga_semaforo),
	.display1(display1),
	.display2(display2),
	.led_atencao(led_atencao),
	.led_perigo(led_perigo),
	.led_pode_passar(led_pode_passar),
	.led_sistema(led_sistema),
	.reset(reset),
	.sinal_emergencia(sinal_emergencia)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #470000 1'b1;
end 

// botao_pedestre
initial
begin
	botao_pedestre = 1'b0;
	botao_pedestre = #110000 1'b1;
	botao_pedestre = #110000 1'b0;
	botao_pedestre = #280000 1'b1;
	botao_pedestre = #80000 1'b0;
end 

// desliga_semaforo
initial
begin
	desliga_semaforo = 1'b0;
	desliga_semaforo = #230000 1'b1;
	desliga_semaforo = #90000 1'b0;
	desliga_semaforo = #300000 1'b1;
	desliga_semaforo = #110000 1'b0;
end 

// sinal_emergencia
initial
begin
	sinal_emergencia = 1'b0;
	sinal_emergencia = #230000 1'b1;
	sinal_emergencia = #150000 1'b0;
	sinal_emergencia = #410000 1'b1;
	sinal_emergencia = #130000 1'b0;
end 

semaforo_pedestre_vlg_sample_tst tb_sample (
	.botao_pedestre(botao_pedestre),
	.clk(clk),
	.desliga_semaforo(desliga_semaforo),
	.reset(reset),
	.sinal_emergencia(sinal_emergencia),
	.sampler_tx(sampler)
);

semaforo_pedestre_vlg_check_tst tb_out(
	.display1(display1),
	.display2(display2),
	.led_atencao(led_atencao),
	.led_perigo(led_perigo),
	.led_pode_passar(led_pode_passar),
	.led_sistema(led_sistema),
	.sampler_rx(sampler)
);
endmodule

